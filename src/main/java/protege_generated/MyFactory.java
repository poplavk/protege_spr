package protege_generated;

import java.util.*;
import protege_generated.impl.*;
import protege_generated.OntologyJavaMapping;
import edu.stanford.smi.protege.model.*;
import edu.stanford.smi.protege.code.generator.wrapping.OntologyJavaMappingUtil;

/**
 * Generated by Protege (http://protege.stanford.edu).
 *
 * @version generated on Fri Mar 25 01:08:40 MSK 2016
 */
public class MyFactory {
    static { OntologyJavaMapping.initMap(); }

    private KnowledgeBase kb;

    public MyFactory(KnowledgeBase kb) {
        this.kb = kb;
    }


    // ***** Class Case *****

    public Cls getCaseClass() {
        final String name = "Case";
        return kb.getCls(name);
    }

    public Case createCase(String name) {
        Cls cls = getCaseClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultCase(inst);
    }

    public Case getCase(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Case.class);
    }

    public Collection<Case> getAllCaseObjects() {
        return getAllCaseObjects(false);
    }

    public Collection<Case> getAllCaseObjects(boolean transitive) {
        Collection<Case> result = new ArrayList<Case>();
        final Cls cls = getCaseClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Case.class));
        }
        return result;
    }


    // ***** Class Client *****

    public Cls getClientClass() {
        final String name = "Client";
        return kb.getCls(name);
    }

    public Client createClient(String name) {
        Cls cls = getClientClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultClient(inst);
    }

    public Client getClient(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Client.class);
    }

    public Collection<Client> getAllClientObjects() {
        return getAllClientObjects(false);
    }

    public Collection<Client> getAllClientObjects(boolean transitive) {
        Collection<Client> result = new ArrayList<Client>();
        final Cls cls = getClientClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Client.class));
        }
        return result;
    }


    // ***** Class CreditData *****

    public Cls getCreditDataClass() {
        final String name = "CreditData";
        return kb.getCls(name);
    }

    public CreditData createCreditData(String name) {
        Cls cls = getCreditDataClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultCreditData(inst);
    }

    public CreditData getCreditData(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), CreditData.class);
    }

    public Collection<CreditData> getAllCreditDataObjects() {
        return getAllCreditDataObjects(false);
    }

    public Collection<CreditData> getAllCreditDataObjects(boolean transitive) {
        Collection<CreditData> result = new ArrayList<CreditData>();
        final Cls cls = getCreditDataClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, CreditData.class));
        }
        return result;
    }


    // ***** Class Document *****

    public Cls getDocumentClass() {
        final String name = "Document";
        return kb.getCls(name);
    }

    public Document createDocument(String name) {
        Cls cls = getDocumentClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultDocument(inst);
    }

    public Document getDocument(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Document.class);
    }

    public Collection<Document> getAllDocumentObjects() {
        return getAllDocumentObjects(false);
    }

    public Collection<Document> getAllDocumentObjects(boolean transitive) {
        Collection<Document> result = new ArrayList<Document>();
        final Cls cls = getDocumentClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Document.class));
        }
        return result;
    }


    // ***** Class Job *****

    public Cls getJobClass() {
        final String name = "Job";
        return kb.getCls(name);
    }

    public Job createJob(String name) {
        Cls cls = getJobClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultJob(inst);
    }

    public Job getJob(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Job.class);
    }

    public Collection<Job> getAllJobObjects() {
        return getAllJobObjects(false);
    }

    public Collection<Job> getAllJobObjects(boolean transitive) {
        Collection<Job> result = new ArrayList<Job>();
        final Cls cls = getJobClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Job.class));
        }
        return result;
    }


    // ***** Class Requirements *****

    public Cls getRequirementsClass() {
        final String name = "Requirements";
        return kb.getCls(name);
    }

    public Requirements createRequirements(String name) {
        Cls cls = getRequirementsClass();
        Instance inst = cls.createDirectInstance(name);
        return new DefaultRequirements(inst);
    }

    public Requirements getRequirements(String name) {
        return OntologyJavaMappingUtil.getSpecificObject(kb, kb.getInstance(name), Requirements.class);
    }

    public Collection<Requirements> getAllRequirementsObjects() {
        return getAllRequirementsObjects(false);
    }

    public Collection<Requirements> getAllRequirementsObjects(boolean transitive) {
        Collection<Requirements> result = new ArrayList<Requirements>();
        final Cls cls = getRequirementsClass();
        for (Object element : transitive ? cls.getInstances() : cls.getDirectInstances()) {
            Instance inst = (Instance) element;
            result.add(OntologyJavaMappingUtil.getSpecificObject(kb, inst, Requirements.class));
        }
        return result;
    }


    // ***** Getter methods for slots *****

    public Slot getAgeSlot() {
        final String name = "age";
        return kb.getSlot(name);
    }

    public Slot getClientSlot() {
        final String name = "client";
        return kb.getSlot(name);
    }

    public Slot getCreditSlot() {
        final String name = "credit";
        return kb.getSlot(name);
    }

    public Slot getDecisionSlot() {
        final String name = "decision";
        return kb.getSlot(name);
    }

    public Slot getDecisionSPRSlot() {
        final String name = "decisionSPR";
        return kb.getSlot(name);
    }

    public Slot getDocumentSlot() {
        final String name = "document";
        return kb.getSlot(name);
    }

    public Slot getExpenseSlot() {
        final String name = "expense";
        return kb.getSlot(name);
    }

    public Slot getFullNameSlot() {
        final String name = "fullName";
        return kb.getSlot(name);
    }

    public Slot getInBlackListSlot() {
        final String name = "inBlackList";
        return kb.getSlot(name);
    }

    public Slot getIncomeSlot() {
        final String name = "income";
        return kb.getSlot(name);
    }

    public Slot getJobSlot() {
        final String name = "job";
        return kb.getSlot(name);
    }

    public Slot getKofIncomeSlot() {
        final String name = "kofIncome";
        return kb.getSlot(name);
    }

    public Slot getMinAgeSlot() {
        final String name = "minAge";
        return kb.getSlot(name);
    }

    public Slot getMinimumAgeSlot() {
        final String name = "minimumAge";
        return kb.getSlot(name);
    }

    public Slot getNumberSlot() {
        final String name = "number";
        return kb.getSlot(name);
    }

    public Slot getOrganizationSlot() {
        final String name = "organization";
        return kb.getSlot(name);
    }

    public Slot getPhoneSlot() {
        final String name = "phone";
        return kb.getSlot(name);
    }

    public Slot getPositionSlot() {
        final String name = "position";
        return kb.getSlot(name);
    }

    public Slot getRegistrationSlot() {
        final String name = "registration";
        return kb.getSlot(name);
    }

    public Slot getReqSlot() {
        final String name = "req";
        return kb.getSlot(name);
    }

    public Slot getSalarySlot() {
        final String name = "salary";
        return kb.getSlot(name);
    }

    public Slot getSeriaSlot() {
        final String name = "seria";
        return kb.getSlot(name);
    }

    public Slot getSpr_Class24Slot() {
        final String name = "spr_Class24";
        return kb.getSlot(name);
    }

    public Slot getSumSlot() {
        final String name = "sum";
        return kb.getSlot(name);
    }

    public Slot getTermSlot() {
        final String name = "term";
        return kb.getSlot(name);
    }

    public Slot getTypeSlot() {
        final String name = "type";
        return kb.getSlot(name);
    }

    public Slot getValBlackSlot() {
        final String name = "valBlack";
        return kb.getSlot(name);
    }

    public Slot getValBlackListSlot() {
        final String name = "valBlackList";
        return kb.getSlot(name);
    }

    public Slot getValDocumentValidSlot() {
        final String name = "valDocumentValid";
        return kb.getSlot(name);
    }

    public Slot getValRegistrationSlot() {
        final String name = "valRegistration";
        return kb.getSlot(name);
    }

    public Slot getValValidSlot() {
        final String name = "valValid";
        return kb.getSlot(name);
    }

    public Slot getValidSlot() {
        final String name = "valid";
        return kb.getSlot(name);
    }

    public Slot getSlotSlot() {
        final String name = "slot";
        return kb.getSlot(name);
    }

    public Slot getSlotNameSlot() {
        final String name = "slotName";
        return kb.getSlot(name);
    }

    public Slot getConditionSlot() {
        final String name = "condition";
        return kb.getSlot(name);
    }

    public Slot getValueSlot() {
        final String name = "value";
        return kb.getSlot(name);
    }

    public Slot getSpr_Class9Slot() {
        final String name = "spr_Class9";
        return kb.getSlot(name);
    }

    public Slot getCondSlot() {
        final String name = "cond";
        return kb.getSlot(name);
    }
}
