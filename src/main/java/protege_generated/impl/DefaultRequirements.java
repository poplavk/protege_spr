package protege_generated.impl;

import edu.stanford.smi.protege.code.generator.wrapping.AbstractWrappedInstance;
import edu.stanford.smi.protege.model.*;
import protege_generated.Requirements;
import protege_generated.*;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * Source Class: Requirements
 *
 * @version generated on Fri Mar 25 01:08:40 MSK 2016
 */
public class DefaultRequirements extends AbstractWrappedInstance
         implements Requirements {

    public DefaultRequirements(Instance instance) {
        super(instance);
    }


    public DefaultRequirements() {
    }

    // Slot cond

    public String getCond() {
        return (String) getWrappedProtegeInstance().getOwnSlotValue(getCondSlot());
    }


    public Slot getCondSlot() {
        final String name = "cond";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasCond() {
        return hasSlotValues(getCondSlot());
    }


    public void setCond(String newCond) {
        setSlotValue(getCondSlot(), newCond);
    }

    // Slot slotName

    public String getSlotName() {
        return (String) getWrappedProtegeInstance().getOwnSlotValue(getSlotNameSlot());
    }


    public Slot getSlotNameSlot() {
        final String name = "slotName";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasSlotName() {
        return hasSlotValues(getSlotNameSlot());
    }


    public void setSlotName(String newSlotName) {
        setSlotValue(getSlotNameSlot(), newSlotName);
    }

    // Slot value

    public String getValue() {
        return (String) getWrappedProtegeInstance().getOwnSlotValue(getValueSlot());
    }


    public Slot getValueSlot() {
        final String name = "value";
        return getKnowledgeBase().getSlot(name);
    }


    public boolean hasValue() {
        return hasSlotValues(getValueSlot());
    }


    public void setValue(String newValue) {
        setSlotValue(getValueSlot(), newValue);
    }
}
